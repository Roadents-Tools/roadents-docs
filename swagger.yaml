openapi: 3.0.0
info:
  version: 0.1.1
  title: Reroute API
  description: >
    The Reroute API describes a group of HTTP endpoints to run a variety of
    public transit routing algorithms. These include things like finding possible
    round trips in time constraints, finding reachable areas, optimizing routes,
    etc.
    Methods are called using the HTTP GET method. Arguements are passed directly
    in the URL as URL Query Parameters; the only header is x-api-key, which is
    used for the API key to ascociate the call to.
    Most methods rely on some sort of branching algorithm; as such, most of them
    take some sort of initial location and initial time. Locations are always
    passed using 2 separate parameters, ```latitude``` and ```longitude```.
    These are passed as signed floating point numbers; ```latitude``` ranges
    from -90.0 to 90.0 and ```longitude``` ranges from -180.0 to 180.0.
    Values like ```90.0 E``` do not work.
    All values representing lengths of time are passed in seconds. If passed
    as a float they will be truncated to the nearest integer second value. All
    values representing specific points in time are passed as seconds since
    January 1st, 1970 GMT.
  contact:
    name: Reroute API Team
    url: http://www.rerouteapi.net

servers:
  - url: 'https://api.rerouteapi.net/v0'
security:
  - ApiKeyAuth : []
paths:
  /generator:
    get:
      summary: Finds all desired locations reachable in a given time.
      description: >
        The Generator algorithm finds routes reachable in a given time.
        The user passes their starting location, how long they would like to
        travel, and what they are looking for and the Generator algorithms gives
        them all the places they can reach and the steps to get to them.
        The algorithm also allows for a variety of filters to allow the caller
        to only get the routes they want and nothing they do not.
      operationId: Generator
      tags:
        - API Methods
      parameters:
        - name: latitude
          in: query
          description: The latitude the user starts at.
          required: true
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
        - name: longitude
          in: query
          description: The longitude the user starts at.
          required: true
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
        - name: query
          in: query
          description: >
            What the user is searching for. This can be anything from "food"
            and "Walmart" to "Virginia Court House" or "Caltech".
          required: true
          schema:
            type: string
        - name: total_time
          in: query
          description: The maximum time the user wants to travel for, in seconds.
          required: true
          schema:
            type: integer
            format: int64
            minimum: 60
            maximum: 10800
        - name: departure_time
          in: query
          description: >
            The time to start at, in seconds since midnight, Jan 1, 1970 GMT.
            Can also pass -1 to use the current time.
          required: false
          schema:
            type: integer
            format: int64
            minimum: -1
            default: -1
        - name: max_walk_time
          in: query
          description: >
            The maximum amount of time the user wants to walk for, in seconds.
          required: false
          schema:
            type: integer
            format: int64
        - name: max_wait_time
          in: query
          description: >
            The maximum amount of time the user wants to spend waiting for
            transit, in seconds.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 60
        - name: min_dist
          in: query
          description: The minimum distance, in meters, that a route's destination is from the start location.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: steps
          in: query
          description: The maximum number of steps over the course of the route.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
            default: 5
        - name: limit
          in: query
          description: The maximum number of routes to return.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 100
            default: 50
      responses:
        '200':
          description: The list of routes that satisfy the passed query.
          content:
            application/json:
              schema:
                type: array
                description: The routes meeting the query.
                items:
                  $ref: '#/components/schemas/Route'
        '5XX':
          description: unexpected error
          content:
            application/json:
              schema:
                type: object
                description: An HTTP error.
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: The text of the error.
  /funnel:
    get:
      summary: Finds all desired locations that can reach a given location in a given time.
      description: >
        The Funnel algorithm finds routes that allow the user to reach a given
        location by a certain time. The user passes in the location they want
        to eventually reach, when they want to reach the location by, how
        long they want to take to get there, and the kind of places they want to
        start at. The algorithm will then return routes starting at a location
        meeting their request and ending at their given location before the
        end time and taking less time than the maximum specified. Currently the
        algorithm will attempt to end the route as close to the end time as
        possible, however due the nature of public transit systems it is unlikely
        that many if any routes end at the provided end time.
        The algorithm provides all the same filters that Generator does,
        though some may behave slightly differently due to Funnel's "reversed"
        nature.
      operationId: Funnel
      x-widdershins-warn:
        - Funnel is currently not available in the public beta. If you would like to use Funnel before it is available to the general public, please contact Reroute directly.
      tags:
        - API Methods
      parameters:
        - name: latitude
          in: query
          description: The latitude the user will end up at.
          required: true
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
        - name: longitude
          in: query
          description: The longitude the user will end up at.
          required: true
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
        - name: query
          in: query
          description: >
            What the user is searching for. This can be anything from "food"
            and "Walmart" to "Virginia Court House" or "Caltech".
          required: true
          schema:
            type: string
        - name: total_time
          in: query
          description: The maximum time the user wants to travel for, in seconds.
          required: true
          schema:
            type: integer
            format: int64
            minimum: 60
            maximum: 10800
        - name: arrival_time
          in: query
          description: >
            The time to ends at, in seconds since midnight, Jan 1, 1970 GMT.
          required: true
          schema:
            type: integer
            format: int64
            minimum: -1
            default: -1
        - name: max_walk_time
          in: query
          description: >
            The maximum amount of time the user wants to walk for, in seconds.
          required: false
          schema:
            type: integer
            format: int64
        - name: max_wait_time
          in: query
          description: >
            The maximum amount of time the user wants to spend waiting for
            transit, in seconds.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 60
        - name: min_dist
          in: query
          description: The minimum distance, in meters, that a route's destination is from the start location.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: steps
          in: query
          description: The maximum number of steps over the course of the route.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
            default: 5
        - name: limit
          in: query
          description: The maximum number of routes to return.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 100
            default: 50
      responses:
        '200':
          description: The list of routes that satisfy the passed query.
          content:
            application/json:
              schema:
                type: array
                description: The routes meeting the query.
                items:
                  $ref: '#/components/schemas/Route'
        '5XX':
          description: unexpected error
          content:
            application/json:
              schema:
                type: object
                description: An HTTP error.
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: The text of the error.
components:
  securitySchemes:
    ApiKeyAuth:
      description: The API key to use for usage tracking.
      type: apiKey
      name: x-api-key
      in: header
  schemas:
    Route:
      type: object
      description: A series of steps a user can take to reach a destination.
      required:
        - start_point
        - end_point
        - start_time
        - total_time
        - steps
      properties:
        start_point:
          description: The location the route starts at.
          allOf:
            - $ref: '#/components/schemas/Location'
        end_point:
          description: The location the route ends at.
          allOf:
            - $ref: '#/components/schemas/Location'
        start_time:
          type: integer
          format: int64
          description: The time the route begins, in seconds since midnight Jan 1, 1970.
        total_time:
          type: integer
          format: int64
          description: How long the route takes, in seconds.
        steps:
          type: array
          description: The steps to get from start_point to end_point.
          items:
            $ref: '#/components/schemas/RouteStep'
    RouteStep:
      description: A singe step in a route.
      type: object
      required:
        - step_type
        - total_time
        - start_point
        - end_point
      discriminator:
        propertyName: step_type
        mapping:
          transit: '#/components/schemas/TransitStep'
          walk: '#/components/schemas/WalkStep'
          stop: '#/components/schemas/PitstopStep'
      properties:
        total_time:
          type: integer
          format: int64
          description: How long this step takes, in seconds.
        step_type:
          description: >
            The type of step this is. Currently this can be one of
            ```transit``` for a TransitStep, ```walk``` for a WalkStep, or
            ```stop``` for a PitstopStep.
          type: string
          enum:
            - transit
            - walk
            - stop
        start_point:
          description: The location that this step starts at.
          allOf:
            - $ref: "#/components/schemas/Location"
        end_point:
          description: The location that this step ends at.
          allOf:
            - $ref: "#/components/schemas/Location"
    WalkStep:
      description: A step where the user walks from one location to another.
      allOf:
        - $ref: '#/components/schemas/RouteStep'
        - type: object
          required:
            - walk_distance
            - step_type
          properties:
            walk_distance:
              description: The distance the user walks, in meters.
              type: integer
              format: int32
            step_type:
              description: WalkSteps have a ```step_type``` value of ```walk```.
              type: string
              enum:
                - walk
    TransitStep:
      description: >
        A step in which the user takes a form of public transit, like
        a bus or train. Because of this ```start_point``` and ```end_point```
        are guranteed to be of type ```Station```.
      allOf:
        - $ref: '#/components/schemas/RouteStep'
        - type: object
          required:
            - wait_time
            - travel_time
            - agency
            - route
            - stops
            - transit_type
            - step_type
          properties:
            wait_time:
              description: >
                How long the user is waiting at ```start_point``` between walking
                and their bus/train/ferry/etc beginning to travel to
                ```end_point```, in seconds.
              type: integer
              format: int32
            travel_time:
              description: >
                How long the bus/train/ferry/etc takes to travel from
                ```start_point``` to ```end_point```, in seconds.
              type: integer
              format: int32
            agency:
              description: The agency that controls this bus route.
              type: string
            route:
              description: The name of the route taken.
              type: string
            stops:
              description: >
                The number of stops travelled between ```start_point``` and
                ```end_point```.
              type: integer
              format: int32
            transit_type:
              description: >
                The type of transit used in this step. Can be one of ```bus```,
                ```train```, ```ferry```, or ```misc```.
              type: string
              enum:
                - bus
                - train
                - ferry
                - misc
            step_type:
              description: TransitSteps have a ```step_type``` value of ```transit```.
              type: string
              enum:
                - transit
    PitstopStep:
      description: >
        This step represents the user not moving from a location for an amount
        of time. This step is used in routes generated by algorithms like
        LunchBreak, where the route contains a non-```Station``` location in
        the middle of the steps. ```start_point``` and ```end_point``` represent
        the location the user will be stopping at, and ```total_time``` is how
        long the user remains at that location. For example, if the user wants
        to go to a restaurant, eat, and then go to class, the route will contain
        a ```PitstopStep``` where ```start_point``` and ```end_point``` are both
         the restaurant and ```total_time``` is the time spent eating.
      allOf:
        - $ref: '#/components/schemas/RouteStep'
        - type: object
          required:
            - step_type
          properties:
            step_type:
              description: PitstopSteps have a ```step_type``` value of ```stop```.
              type: string
              enum:
                - stop
    Location:
      description: >
        A location of any possible type. While all locations contain these fields,
        some may contain more; this is dependent on the type of location this is,
        stored in the ```location_type``` field.
      type: object
      required:
        - latitude
        - longitude
        - location_type
      discriminator:
        propertyName: location_type
        mapping:
          input: '#/components/schemas/InputLocation'
          station: '#/components/schemas/Station'
          returned: '#/components/schemas/ReturnedLocation'
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          description: The latitude of the location.
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          description: The longitude of the location.
        location_type:
          type: string
          description: >
            The type of location this is. Can be one of ```input```,
            ```station```, or ```returned``` depending on if this location was
            passed by the caller, a valid location meeting the caller's query,
            or a station to travel between the two.
          enum:
            - input
            - station
            - returned
    InputLocation:
      description: >
        The location the caller passed in to the method. This has no extra
        information, and has a ```location_type``` value of ```input```.
      allOf:
        - $ref: "#/components/schemas/Location"
        - type: object
          required:
            - location_type
          properties:
            location_type:
              type: string
              description: >
                Input locations have a ```location_type``` value of ```input```.
              enum:
                - input
    Station:
      description: >
        A public transit station. In addition to standard fields, it also has
        a ```name``` field. It has a ```location_type``` value of ```station```.
      allOf:
        - $ref: "#/components/schemas/Location"
        - type: object
          required:
            - name
            - location_type
          properties:
            name:
              type: string
              description: The name of the station, like "23rd and 2nd".
            location_type:
              type: string
              description: Stations have a ```location_type``` value of ```station```.
              enum:
                - station
    ReturnedLocation:
      description: >
        A location found by the method to meet the given requirements. It has
        a name and a series of tags in addition to the standard ```location```
        field.
      allOf:
        - $ref: "#/components/schemas/Location"
        - type: object
          required:
            - name
            - categories
            - location_type
          properties:
            name:
              type: string
              description: The name of this location.
            tags:
              type: array
              description: A list of keyword-style categories that apply to this location, like "park".
              items:
                type: string
            location_type:
              type: string
              description: ReturnedLocations have a ```location_type``` value of ```returned```.
              enum:
                - returned
